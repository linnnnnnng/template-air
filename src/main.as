package  {	import flash.events.*;	import flash.system.*;	import flash.display.*;	import flash.utils.*;	import flash.net.*;	import flash.xml.*;	import flash.filesystem.*;	import flash.desktop.*;	import flash.geom.*;	import flash.media.*;	import flash.text.*;	import com.greensock.*;	import com.greensock.easing.*;	import com.adobe.serialization.json.JSON;	import com.monstercode.*;		public class main extends MovieClip	{		private var testLocal:Boolean = true		private var n:Number=0				public function main() {			gotoAndStop(1);			addEventListener(Event.ENTER_FRAME,preloader);		}				//=============================================================		//Preloader		//=============================================================		private function preloader(e:Event) {			var prog = Math.floor(((this.loaderInfo.bytesLoaded/this.loaderInfo.bytesTotal)*100));			tPreloader.text="Loading " + prog + "%";			if (this.loaderInfo.bytesLoaded == this.loaderInfo.bytesTotal) {				removeEventListener(Event.ENTER_FRAME,preloader);				startPage()			}		}				private function startPage() {			gotoAndStop(2);			if (stage) init();			else addEventListener(Event.ADDED_TO_STAGE, init);		}				//=============================================================		//Main		//=============================================================		private function init(e:Event = null):void {			stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;			NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, handleInvoke);						if(testLocal) {				addChild( new Stats() );			}						//main constructor			initTracking();			//insertTracking('/click/page')		}				private function handleInvoke(event:InvokeEvent){			//to receive command line arguments			if(event.arguments.length > 0){				//event.arguments[0]			}			NativeApplication.nativeApplication.removeEventListener(InvokeEvent.INVOKE, handleInvoke);		}				private function quitApp(){			clearMemory();			NativeApplication.nativeApplication.exit();		}				//=============================================================		//Tracking Function		//=============================================================		private var xml:XML;		private var tracking:URLLoader = new URLLoader();		private var tracking_arr:Array=[];		private function initTracking(){			tracking.load(new URLRequest("tracking.xml"));			tracking.addEventListener(Event.COMPLETE, onTrackingLoaded);		}				private function onTrackingLoaded(e:Event):void {			xml=new XML(e.target.data);			var il:XMLList = xml.item;			for (n=0;n<xml.item.length();n++) {				tracking_arr.push({pageview:il.@pageview[n],date:il.@date[n]})			}			tracking=null		}				private var trackingData:String=""		private var trackingFileStream:FileStream = new FileStream();		private var pathToTrackingFile:String = File.applicationDirectory.resolvePath("tracking.xml").nativePath;		private var localTrackingFile:File = new File(pathToTrackingFile);		private var cr:String="\n"				private function insertTracking(pageview:String) {			trackingFileStream.open(localTrackingFile, FileMode.WRITE);			trackingData="<?xml version='1.0' encoding='utf-8'?>" + 					cr +					"<tracking>" +												cr			for(n=0;n<tracking_arr.length;n++) {				trackingData+='\t<item pageview="'+tracking_arr[n].pageview+'" date="'+tracking_arr[n].date+'" />\n'			}			trackingData+='\t<item pageview="'+pageview+'" date="'+getDate()+'" />\n'			trackingData+="</tracking>";			trackingFileStream.writeUTFBytes(trackingData);			trackingFileStream.close();		}				//=============================================================		//Extra Function		//=============================================================		private function randomSort(elementA:Object, elementB:Object):Number {			var sortNum : int = Math.round(Math.random() * 2) - 1;			return sortNum;		}				private function isEven(num) {			return !(num%2);//shorter		}				private function randomBoolean():Boolean {			return Boolean( Math.round(Math.random()) );		}				private function getTimeStampFormat() {			var currentDate:Date = new Date();			return currentDate.valueOf()		}				private function getDate() {			var currentDate:Date = new Date();			return convertASDateToSQLDateTime(currentDate)		}				private function convertASDateToSQLDateTime(date:Date):String {			// month processing			date.month++;			var month:String = enforceLeadingZero(date.month);			// day processing			var day:String = enforceLeadingZero(date.date);			// hour processing			var hours:String = enforceLeadingZero(date.hours);			// minutes processing 			var minutes:String = enforceLeadingZero(date.minutes);			// seconds processing 			var seconds:String = enforceLeadingZero(date.seconds);			//mileseconds processing			var milseconds:String = enforceLeadingZero(date.milliseconds);			//timezone processing			var timezone:String = enforceLeadingZero(date.timezoneOffset);			//return date.fullYear + "-" + month + "-" + day + "T" + hours + ":" + minutes + ":" + seconds;			return date.fullYear + "-" + month + "-" + day + "T" + hours + ":" + minutes + ":" + seconds;		}				private static function enforceLeadingZero(i:int):String {            if (i.toString().length < 2) {                return "0" + i;            }            else             {                return i.toString();            }        }				private function removeTabsAndNewLines($str:String):String {			var rex:RegExp = /(\t|\n)/gi;			$str = $str.replace(rex,'');			return $str;		}				//=============================================================		//Garbage function		//=============================================================		private function clearMemory(){			//remove all event listeners here			//set objects to null here			System.disposeXML(xml);						try {			   System.gc()			   return true;			 }catch (e:Error){			   return false;			 }		}	}}